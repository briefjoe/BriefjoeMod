package com.briefjoe.mod.init.blocks;

import java.util.Random;

import com.briefjoe.mod.BriefjoeMod;
import com.briefjoe.mod.init.items.BriefjoeItems;
import com.briefjoe.mod.init.tileentity.TileEntityTrash;

import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.world.World;

public class BlockTrash extends BlockUtilTile{

	public BlockTrash(Material materialIn) {
		super(materialIn);
	}

	@Override
	public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, EntityPlayer player, EnumFacing side, float hitX, float hitY, float hitZ)
	{
		if (!world.isRemote)
		{
			TileEntity tile_entity = world.getTileEntity(pos);

			if (tile_entity instanceof TileEntityTrash)
			{
					player.openGui(BriefjoeMod.instance, 0, world, pos.getX(), pos.getY(), pos.getZ());	
			}
		}
		return true;	
	}
	
	@Override
	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, BlockPos pos)
	{
		setBlockBounds(2F * 0.0625F, 0.0F, 2F * 0.0625F, 14F * 0.0625F, 13F * 0.0625F, 14F * 0.0625F);
	}

	@Override
	public void addCollisionBoxesToList(World world, BlockPos pos, IBlockState state, AxisAlignedBB mask, List list, Entity collidingEntity)
	{
		if (!(collidingEntity instanceof EntitySittableBlock))
		{
			setBlockBounds(2F * 0.0625F, 0.0F, 2F * 0.0625F, 14F * 0.0625F, 13F * 0.0625F, 14F * 0.0625F);
		}
		else
		{
			setBlockBounds(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
		}
		super.addCollisionBoxesToList(world, pos, state, mask, list, collidingEntity);
	}
	
	@Override
	public TileEntity createNewTileEntity(World worldIn, int meta)
	{
		return new TileEntityTrash();
	}
	@Override
	public Item getItemDropped(IBlockState state, Random rand, int fortune){
		return BriefjoeItems.itemTrashCan;
	}
	@Override
	public ItemStack getPickBlock(MovingObjectPosition target, World world, BlockPos pos)
	{
		return new ItemStack(BriefjoeItems.itemTrashCan);
	}
}
