package com.briefjoe.mod.init.tileentity;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;

public class TileEntityLogPile extends TileEntity implements IInventory{
	
	private ItemStack[] logPileLogs = new ItemStack[4];
	private String customName;
	
	public int getSizeInventory(){
		return 4;
	}
	
	@Override
	public ItemStack getStackInSlot(int par1){
		return this.logPileLogs[par1];
	}
	
	@Override
	public ItemStack decrStackSize(int par1, int par2){
		if (this.logPileLogs[par1] !=null){
			
			ItemStack var3;
			
			if(this.logPileLogs[par1].stackSize <= par2){
				
				var3 = this.logPileLogs[par1];
				this.markDirty();
				return var3;
			}
			
			var3 = this.logPileLogs[par1].splitStack(par2);
			
			if(this.logPileLogs[par1].stackSize == 0){
				
				this.logPileLogs[par1] = null;
				
			}
			
			this.markDirty();
		}
		return null;
	}
	
	@Override
	public ItemStack getStackInSlotOnClosing(int par1){
		
		if(this.logPileLogs[par1] != null){
			
			ItemStack var2 = this.logPileLogs[par1];
			this.logPileLogs[par1] = null;
			return var2;
		}
		return null;
	}
	
	@Override
	public void setInventorySlotContents(int par1, ItemStack par2ItemStack){
		this.logPileLogs[par1] = par2ItemStack;
		
		if(par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit()){
			
			par2ItemStack.stackSize = this.getInvenroryStackLimit;
			
		}
		
		this.markDirty();
	}
	
	@Override
	public void readFromNBT(NBTTagCompound par1NBTTagCompound){
		
		super.readFromNBT(par1NBTTagCompound);
		NBTTagList var2 = (NBTTagList) par1NBTTagCompound.getTag("logs");
		this.logPileLogs = new ItemStack[this.getSizeInventory()];
		
		for(int var3 = 0; var3 < var2.tagCount(); ++var3){
			
			NBTTagCompound var4 = (NBTTagCompound) var2.getCompoundTagAt(var3);
			int var5 = var4.getByte("logs") & 255;
			
			if(var5 >= 0 && var5 < this.logPileLogs.length){
				
				this.logPileLogs[var5] = ItemStack.loadItemStackFromNBT(var4);
			}
		}
	}
	
	
	@Override
	public void writeToNBT(NBTTagCompound par1NBTTagCompound){
		
		super.writeToNBT(par1NBTTagCompound);
		NBTTagList var2 = new NBTTagList();
		
		for(int var3 = 0; var3 < this.logPileLogs.length; ++var3){
			
			if(this.logPileLogs[var3] != null){
				
				NBTTagCompound var4 = new NBTTagCompound();
				var4.setByte("logs", (byte) var3);
				this.logPileLogs[var3].writeToNBT(var4);
				var2.appendTag(var4);
			}
		}
		par1NBTTagCompound.setTag("logs", var2);
	}
	
	@Override
	public int getInventoryStackLimit(){
		return 16;
	}
	
	//@Override
	public boolean isUsableByPlayer(EntityPlayer entityPlayer){
		return this.worldObj.getTileEntity(pos) != this ? false : entityPlayer.getDistanceSq(pos.getX() + 0.5D, pos.getY() + 0.5D, pos.getZ() + 0.5D) <= 64.0D;
	}
	
	@Override
	public void upateContainingblockInfo(){
		
		super.updateContainingBlockInfo();
	}
	
	@Override
	public void invalidate(){
		this.updateContainingBlockInfo();
		this.invalidate();
	}
	
}
